[{"_id": "YK9sXm33X47giLQLX", "postedAt": "2015-04-05T16:23:17.694Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>I'd like to add some more information to this.</p>\n<ol>\n<li><p>As mentioned, front-end coders are in less demand and are paid less. There's a very good reason for this... it is MUCH easier to learn. It's best to pick up design ability as well as coding ability if you want to earn-to-give through front-end.</p>\n</li>\n<li><p>Some of the last languages on the list are for data science programming. While there's crossover applicability of these to regular programming, they are, for the most part, easier to learn and with some great salaries themselves. There's also great demand for data scientists. So don't dismiss R because it's 20th most popular... that also means that there isn't enough supply, and it has the benefit of being relatively easy to learn.</p>\n</li>\n<li><p>I recommend looking at the momentum of languages as well. One example of positive momentum is Javascript; a number of JS-based frameworks are becoming popular, and it is becoming more and more used for front-end, back-end, and all other aspects of web dev. Python is one that's becoming learned initially more because of its versatility; it's used for web dev as well as data science.</p>\n</li>\n</ol>\n", "parentCommentId": null, "user": {"username": "joshjacobson"}}, {"_id": "5AtHZPgrC5rMPuiuG", "postedAt": "2015-04-05T17:27:20.786Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>It might be interesting to compare data from other sources regarding popularity. For example, GitHub tells a dramatically different story about programming language usage that may be useful in predicting what these trends in industry will be in the future.</p>\n", "parentCommentId": null, "user": {"username": "maxpkatz"}}, {"_id": "RXcpTbPyEDZEwgpT4", "postedAt": "2015-04-07T02:16:19.293Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>As someone currently in the process of learning programming here are a few thoughts on my attempt at learning two of the bolded languages, Java and Ruby:</p>\n<p>I'm currently working through <a href=\"http://www.theodinproject.com/\">The Odin Project</a>, which has a backend focus on Ruby, and I'd highly recommend it. I'd also recommend <a href=\"http://everydayutilitarian.com/essays/notes-on-the-odin-project/\">Peter's guide to TOP</a> which I've found very useful which includes some time estimates, some additional resources and some things to learn after you complete TOP. Perhaps the biggest plus to TOP for me is giving projects of the correct difficulty at the correct time so that they are challenging but doable. Another of the biggest benefits of TOP is the sheer scope of the resources already collected for you. Also Ruby is far more intuitive than Java.</p>\n<p>Before starting TOP I started learning programming by attempting to learn Java on my own without much structure. However, going on my own I'd often spend time attempting to track down a good explanation for topics. There was also the issue of not knowing what was a logical path to take to learning and I think I took some major false steps. The resource I found most beneficial during that time were probably the free courses at <a href=\"https://caveofprogramming.com/\">Cave of Programming</a> which covered a wide range of topics but had the huge downside of being somewhat dated video tutorials. Other than that I didn't find lots of free resources to help learning Java but there are some pretty cheap stuff on <a href=\"https://www.udemy.com/\">Udemy</a> and a subscription to <a href=\"http://www.lynda.com/\">Lynda</a> could be a good investment as well.</p>\n<p>Of course, a huge caveat, I am a sample size of one who had no experience at all with programming before starting with Java. People with different backgrounds may have very different experiences.</p>\n", "parentCommentId": null, "user": {"username": "Marcus_A_Davis"}}, {"_id": "CFZGe2uCc25kEFNQe", "postedAt": "2015-04-07T04:18:20.334Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>Some additional factors people may want to consider:</p>\n<p>1.) How enjoyable it is to program in that language, since you'll probably be doing it a lot.  (Programming in Java is generally not fun.)</p>\n<p>2.) How good the resources are for learning that language.  (Ruby seems to be the best on this metric.)</p>\n<p>3.) What the companies that use each language are like.  (My guess is few SF start-ups are programming in .NET these days.)</p>\n", "parentCommentId": null, "user": {"username": "Peter_Hurford"}}, {"_id": "4MCpxe2RgtJ4p4vf5", "postedAt": "2015-04-07T09:55:59.335Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>Matt Gibb sent around the following on the 80k alumni list, and said I could pass it on - thought people reading this post might be interested: \n&quot;A couple of people have asked for recommendations on the quickest way to\nlearn. I have a limited perspective, but I have spent the last 8 years\ndeveloping, have attended one bootcamp (Insight Data Science), which was\nper unit time the single most valuable educational experience I have ever\nhad, and I have been able to visit many of the top bootcamps in the Bay:\nHackReactor, AppAcademy, Hackbright, Makersquare etc. I know many of the\nfounders personally and/or have taken investment from them. Anyway, here's\nmy 2 cents that I believe will be helpful, based on what I have seen work.\nTake it with a hefty pinch of salt.</p>\n<ul>\n<li>If you are going to learn one web development language, learn\nJavascript. It is hacky, but it is the only browser language (ignoring\nclojurescript, scala.js etc. which you might consider tackling much later),\nyou can cobble together the whole stack in it: frontend, backend (node,\nmeteor, sails.js), database (mongo, rethinkdb, firebase). HackReactor have\na JS-only syllabus, and are one of the top schools in the world.</li>\n<li>If you are going to learn one sql database, learn Postgres.</li>\n<li>If you are going to learn one frontend framework, learn React.js.\nAngular's source code and design are a bit messy and you will ship a\nfaster, more reliable product with React. With React Native, you will soon\nbe able to deliver iOS and Android apps in too.</li>\n<li>If you are going to learn one data/machine learning language, learn\nPython (numpy, scipy, pandas, scikit-learn).</li>\n</ul>\n<p>After the above:</p>\n<ul>\n<li>If you are going to learn one Big Data language, learn Scala (spark,\nakka, <a href=\"http://www.reactivemanifesto.org/\">http://www.reactivemanifesto.org/</a>,\n<a href=\"https://www.coursera.org/course/reactive\">https://www.coursera.org/course/reactive</a>)</li>\n</ul>\n<p>I have found codeschool.com really helpful, but I know there are many other\ngreat resources out there which I haven't played with.</p>\n<p>I would recommend going to a (well-regarded) bootcamp over self study,\nbecause you will make progress at about 3 times the rate for a few reasons:</p>\n<ul>\n<li>The courses are designed to focus aggressively on the most\nimportant/high ROI things to learn. When I was getting started, I found I\nwould just be diffusing through this unknown space of related technologies\nwith little idea what was most important, and ending up learning a load of\nunimportant trivia along the way.</li>\n<li>You will end up stuck on a missing semicolon or closing bracket for 10\nminutes, not 2 days.</li>\n<li>You will be surrounded by smart, determined people that will push you\nto be your best and give you valuable solicited (and unsolicited!) feedback</li>\n<li>Every day you will be immersed in creative ideas and evolving products\nthat will influence your own</li>\n<li>You can ask any question you can imagine and almost certainly get an\ninformed answer quickly</li>\n</ul>\n<blockquote>\n<p>For example to automatically test a batch of solar cells on performance,\nmatch supply and demand on the electricity grid, help a doctor find a tumor\nin an MRI image, process a lot of money traffic. These things do not\ntypically happen on a consumer website.</p>\n</blockquote>\n<p>Learning to code will allow you to do all these things. Coincidentally,\npart of my PhD was in in image segmentation/registration, I am building a\nreal-time Dutch auction now to drive down costs for students, and the\nsolutions/skills required are much closer to web dev than you might\nthink. Don't\nworry just get started :)&quot;</p>\n", "parentCommentId": null, "user": {"username": "Michelle_Hutchinson"}}, {"_id": "yeiqw9v7buKDWRHQz", "postedAt": "2015-04-07T14:17:18.004Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>This is all going to be purely anecdotal, of course (and note that I am not in a tech hub or even <em>any</em> city, to my great unhappiness): I started out with Ruby, and I feel like I came in during &quot;peak Rails&quot;. Trying to find another Rails job is extremely challenging because of the huge glut of beginner-intermediate Rails developers, and it has gone mainstream enough that it's not really a useful signal of whether it's an employer that's worth your time. I think Ruby's future is basically that of Java. Actually, I'm slightly more optimistic about Java.</p>\n<p>If I were starting all over from scratch today, AND if I had a friend or mentor that could help me with questions when I was stuck, I'd go straight for Clojure. The Clojure community is still very small, but really excited about newcomers. The reason I mention the necessity of some kind of mentor is that Clojure, as opposed to Ruby or Javascript, still has so many beginner pains that it really helps to have someone steer you in the right direction (Clojure errors are notoriously unhelpful and it doesn't just work &quot;out of the box&quot; like Rails does). The Clojure groups are all small enough that you can join in and not be lost, but there seems to be vastly more Clojure dev positions than people to fill them. These aren't jobs you'll find listed on StackOverflow or LinkedIn - they're passed around through word of mouth. But if you are a respectful community member, people seem overwhelmingly happy to help you. (Note that I haven't been able to land one of these Clojure jobs yet, but I imagine a more talented programmer than me would be able to do so quite quickly.)</p>\n<p>I imagine there are other languages like Clojure, that are small but full of opportunity. I'm just not part of them, so I can't comment on what's there. Scala seems like it might be similar.</p>\n<p>Take this with a grain of salt, as I don't have access to any sort of real-life programming community. This has just been my experience with my interactions online. As others have said, bootcamps are an appealing option if that's something that's available to you.</p>\n", "parentCommentId": null, "user": {"username": "Kirstie_Cook"}}, {"_id": "nyraShtE6uzSe6qek", "postedAt": "2015-04-07T15:05:45.981Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>Regarding the topic of how to learn, I am not such a fan of the online courses relative to simply reading a book or website which lists all a language's syntax, or a long list of functions. If that's enough for you to grasp it, it's certainly faster. Many of the main websites for languages contain these lists.</p>\n", "parentCommentId": "RXcpTbPyEDZEwgpT4", "user": {"username": "impala"}}, {"_id": "wcTAFu3GC2sSzHphF", "postedAt": "2015-04-07T15:07:13.425Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>What's the definition of frontend and backend here, which is relevant to earning-to-give potential? If you're writing database-driven Ruby or PHP code which generates HTML, are you a frontend or backend developer in this sense?</p>\n", "parentCommentId": null, "user": {"username": "impala"}}, {"_id": "8kKDmnwWaHDKj2iHu", "postedAt": "2015-04-11T15:44:09.556Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>(off-topic, but I can't find a way to do private messages.)</p>\n<blockquote>\n<p>Trying to find another Rails job is extremely challenging</p>\n</blockquote>\n<p>I started an earn to give company which is hiring rails developers. If interested, can you send a resume to my first initial plus last name @healthefilings.com?</p>\n", "parentCommentId": "yeiqw9v7buKDWRHQz", "user": {"username": "Ben_West"}}, {"_id": "QzTHeDvmC6jAbJE6n", "postedAt": "2015-04-11T15:51:03.425Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>in a <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">well-designed system</a>, the presentation layer should be a separate code base from the business logic layer. MVC and other frameworks enforce this. So in theory you should never have one function which both does logical calculations on the database (e.g. validating that data is formatted correctly) and outputs HTML.</p>\n<p>It might be that at a small company one person does both the backend and the front-end, in which case I would describe them as a &quot;full stack&quot; developer.</p>\n", "parentCommentId": "wcTAFu3GC2sSzHphF", "user": {"username": "Ben_West"}}, {"_id": "6iw6aZS73HqMxf9eq", "postedAt": "2015-04-12T20:48:14.254Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>Traditionally languages like Clojure are learned by experienced programmers who have high intrinsic interest in the act of programming itself, so I expect the people you compete against for Clojure jobs to be pretty skilled, and employers may also have a high hiring bar.  But if what you say is true it does sound better than Ruby/Rails.</p>\n", "parentCommentId": "yeiqw9v7buKDWRHQz", "user": {"username": "John_Maxwell_IV"}}, {"_id": "5ny3x9KyGvTqNDjx5", "postedAt": "2015-04-12T20:49:38.836Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p><a href=\"http://lesswrong.com/lw/cnp/what_is_the_best_programming_language/\">Less Wrong thread</a>.  I still advocate learning Python; it's an OK or good choice for almost anything you'd want to program, and I think its simplicity and readability mean that it will give you the best conceptual foundation out of anything out there.  I listed a bunch of resources on learning Python in <a href=\"http://lesswrong.com/lw/cnh/psa_learn_to_code/\">this post</a>.  They're a bit deeper and more conceptual than the resources you'll see on learning Ruby, which is a good thing because it will differentiate you from all the Ruby web development types and give you the opportunity of becoming a backend developer, which has higher salaries and barriers to entry (and is a better fit for someone who has more of a traditional math/engineering mind since it's <a href=\"http://lesswrong.com/lw/lpf/the_truth_about_mathematical_ability/byqe\">less forgiving of mistakes</a> and has more challenging mathy engineering problems).  If you're sure frontend web development is all you want to do or you have some cool frontend thing you're inspired to make, I guess JavaScript is fine.</p>\n", "parentCommentId": null, "user": {"username": "John_Maxwell_IV"}}, {"_id": "J5ai2Pt5KhMzS6Hwt", "postedAt": "2015-04-13T00:59:52.983Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>I have also found Python to be very useful.  I learned through Udacity's Intro to Computer Science <a href=\"https://www.udacity.com/course/intro-to-computer-science--cs101\">course</a>, which was really user friendly. </p>\n", "parentCommentId": "5ny3x9KyGvTqNDjx5", "user": {"username": "Phil_Thomas"}}, {"_id": "kNzRkg5ye9YrC8NHZ", "postedAt": "2015-05-15T18:15:56.599Z", "postId": "Gekz3iTi3T2RaJ8PZ", "htmlBody": "<p>Epicodus put their entire Ruby/Rails program online for free <a href=\"https://www.learnhowtoprogram.com/table-of-contents\">here</a>.  I don't know enough to judge the quality, but it might be useful.  </p>\n", "parentCommentId": "RXcpTbPyEDZEwgpT4", "user": {"username": "Phil_Thomas"}}]